 {/* <Grid item xs={12} sm={6}>
              <TextField
                autoComplete="given-name"
                name="firstName"
                required
                fullWidth
                id="firstName"
                label="First Name"
                autoFocus
                value={inputState.firstName}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.firstName && (
                <Alert severity="warning">
                  {inputsErrorsState.firstName.map((item) => (
                    <div key={"firstName-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                autoComplete="middle-name"
                name="middleName"
                fullWidth
                id="middleName"
                label="Middle Name"
                autoFocus
                value={inputState.middleName}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.middleName && (
                <Alert severity="warning">
                  {inputsErrorsState.middleName.map((item) => (
                    <div key={"middleName-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                id="lastName"
                label="Last Name"
                name="lastName"
                autoComplete="family-name"
                value={inputState.lastName}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.lastName && (
                <Alert severity="warning">
                  {inputsErrorsState.lastName.map((item) => (
                    <div key={"lastName-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                id="phone"
                label="Phone number"
                name="phone"
                autoComplete="phone"
                value={inputState.phone}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.phone && (
                <Alert severity="warning">
                  {inputsErrorsState.phone.map((item) => (
                    <div key={"phone-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                type="email"
                id="email"
                label="Email Address"
                name="email"
                autoComplete="email"
                value={inputState.email}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.email && (
                <Alert severity="warning">
                  {inputsErrorsState.email.map((item) => (
                    <div key={"email-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                name="password"
                label="Password"
                type="password"
                id="password"
                autoComplete="new-password"
                value={inputState.password}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.password && (
                <Alert severity="warning">
                  {inputsErrorsState.password.map((item) => (
                    <div key={"password-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                autoComplete="image url"
                name="imgUrl"
                fullWidth
                id="imgUrl"
                label="Image url"
                autoFocus
                value={inputState.imgUrl}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.imgUrl && (
                <Alert severity="warning">
                  {inputsErrorsState.imgUrl.map((item) => (
                    <div key={"imgUrl-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                autoComplete="image alt"
                name="imgAlt"
                fullWidth
                id="imgAlt"
                label="Image alt"
                autoFocus
                value={inputState.imgAlt}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.imgAlt && (
                <Alert severity="warning">
                  {inputsErrorsState.imgAlt.map((item) => (
                    <div key={"imgAlt-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                autoComplete="state"
                name="state"
                fullWidth
                id="state"
                label="State"
                autoFocus
                value={inputState.state}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.state && (
                <Alert severity="warning">
                  {inputsErrorsState.state.map((item) => (
                    <div key={"state-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                name="country"
                label="Country"
                id="country"
                autoComplete="country"
                value={inputState.country}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.country && (
                <Alert severity="warning">
                  {inputsErrorsState.country.map((item) => (
                    <div key={"country-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                name="city"
                label="City"
                id="city"
                autoComplete="citycity"
                value={inputState.city}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.city && (
                <Alert severity="warning">
                  {inputsErrorsState.city.map((item) => (
                    <div key={"city-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                name="street"
                label="Street"
                id="street"
                autoComplete="street"
                value={inputState.street}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.street && (
                <Alert severity="warning">
                  {inputsErrorsState.street.map((item) => (
                    <div key={"street-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                required
                fullWidth
                name="House number"
                label="House number"
                id="houseNumber"
                autoComplete="house number"
                value={inputState.houseNumber}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.houseNumber && (
                <Alert severity="warning">
                  {inputsErrorsState.houseNumber.map((item) => (
                    <div key={"housenumber-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                name="zip"
                label="zip"
                id="zip"
                autoComplete="zip"
                value={inputState.zip}
                onChange={handleInputChange}
              />
              {inputsErrorsState && inputsErrorsState.zip && (
                <Alert severity="warning">
                  {inputsErrorsState.zip.map((item) => (
                    <div key={"zip-errors" + item}>
                      {item.includes("pattern:")
                        ? item.split("pattern:")[0] + "pattern"
                        : item}
                    </div>
                  ))}
                </Alert>
              )}
            </Grid> */}
 {/* <Grid item xs={12} sm={6}>
              <Button
                fullWidth
                variant="outlined"
                color="error"
                sx={{ mt: 3, mb: 2 }}
                onClick={handleBtnCancelClick}
              >
                CANCEL
              </Button>
            </Grid>

            <Grid item xs={12} sm={6}>
              <Button
                fullWidth
                variant="outlined"
                sx={{ mt: 3, mb: 2 }}
                onClick={handleBtnResetClick}
              >
                <RotateLeftRoundedIcon />
              </Button>
            </Grid> */}